// Generated by ts-to-zod
import { z } from 'zod'
import { zod } from '@snailicide/g-library'

import MarkdownIt from 'markdown-it'

const MDtoHTML = (value: string) => {
    // value = value.replace('\n','')
    /* return new MarkdownIt({
        html: false
    }).render(value)*/
    return value
}
export type GraphAttributesSchema = z.infer<typeof graphAttributesSchema>
export const graphAttributesSchema = z.object({
    category: z.string().optional(),
    label: z.string().optional(),
    author: z.string().optional(),
    authorURL: z.string().optional(),
    description: z.string().transform(MDtoHTML).optional(),
    tags: z.string().optional(), //todo: switch back to arr?????????z.array(z.string()).optional(),
    icon: z.string().optional(),
})

export const replaceMetaSchema = z.record(z.string())
export type ReplaceMetaSchema = z.infer<typeof replaceMetaSchema>

export const graphDataSchema = z.object({
    attributes: zod.optionalDefault(graphAttributesSchema, {}),
    metadata: zod.optionalDefault(replaceMetaSchema, {}),
})
export type GraphDataSchema = z.infer<typeof graphDataSchema>

export type ReplaceFileSchema = z.infer<typeof replaceFileSchema>
export const replaceFileSchema = z.object({
    pkg: zod.optionalDefault(
        z.object({
            desc: z.string().transform(MDtoHTML).optional(),
            metadata: replaceMetaSchema.optional(),
        }),
        {}
    ),
    gph_defaults: zod.optionalDefault(graphDataSchema, {}),
    gph: zod.optionalDefault(zod.record(graphDataSchema), {}),
})

export type ResolvedGraphDictSchema = z.infer<typeof resolvedGraphDictSchema>
export const resolvedGraphDictSchema = zod.object({
    attributes: graphAttributesSchema,
    metadata: replaceMetaSchema,
})

export const _dataSBSPackageSchema = z.object({
    desc: z.string().optional(),
    metadata: replaceMetaSchema.optional(),
})

export const _dataGraphSchema = zod.object({
    attributes: graphAttributesSchema,
    metadata: replaceMetaSchema,
})
export const _queueDataProcesses = () =>
    z.union(
        /* * meta + desc + dependencies = sdpackage.js * */
        [_dataSBSPackageSchema, _dataGraphSchema]
    )

export type GraphDictByIDSchema = z.infer<typeof graphDictByIDSchema>
export const graphDictByIDSchema = z.record(resolvedGraphDictSchema)
